// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cmd/whoami/api/quiz.proto

package quiz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuizService_Add_FullMethodName     = "/quiz.QuizService/Add"
	QuizService_GetAll_FullMethodName  = "/quiz.QuizService/GetAll"
	QuizService_GetByID_FullMethodName = "/quiz.QuizService/GetByID"
)

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizServiceClient interface {
	Add(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Quiz, Quiz], error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Quiz], error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Quiz, error)
}

type quizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizServiceClient(cc grpc.ClientConnInterface) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) Add(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Quiz, Quiz], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuizService_ServiceDesc.Streams[0], QuizService_Add_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Quiz, Quiz]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizService_AddClient = grpc.BidiStreamingClient[Quiz, Quiz]

func (c *quizServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Quiz], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuizService_ServiceDesc.Streams[1], QuizService_GetAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Quiz]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizService_GetAllClient = grpc.ServerStreamingClient[Quiz]

func (c *quizServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Quiz, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Quiz)
	err := c.cc.Invoke(ctx, QuizService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServiceServer is the server API for QuizService service.
// All implementations must embed UnimplementedQuizServiceServer
// for forward compatibility.
type QuizServiceServer interface {
	Add(grpc.BidiStreamingServer[Quiz, Quiz]) error
	GetAll(*Empty, grpc.ServerStreamingServer[Quiz]) error
	GetByID(context.Context, *GetByIDRequest) (*Quiz, error)
	mustEmbedUnimplementedQuizServiceServer()
}

// UnimplementedQuizServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizServiceServer struct{}

func (UnimplementedQuizServiceServer) Add(grpc.BidiStreamingServer[Quiz, Quiz]) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedQuizServiceServer) GetAll(*Empty, grpc.ServerStreamingServer[Quiz]) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedQuizServiceServer) GetByID(context.Context, *GetByIDRequest) (*Quiz, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedQuizServiceServer) mustEmbedUnimplementedQuizServiceServer() {}
func (UnimplementedQuizServiceServer) testEmbeddedByValue()                     {}

// UnsafeQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServiceServer will
// result in compilation errors.
type UnsafeQuizServiceServer interface {
	mustEmbedUnimplementedQuizServiceServer()
}

func RegisterQuizServiceServer(s grpc.ServiceRegistrar, srv QuizServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuizServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizService_ServiceDesc, srv)
}

func _QuizService_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuizServiceServer).Add(&grpc.GenericServerStream[Quiz, Quiz]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizService_AddServer = grpc.BidiStreamingServer[Quiz, Quiz]

func _QuizService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuizServiceServer).GetAll(m, &grpc.GenericServerStream[Empty, Quiz]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizService_GetAllServer = grpc.ServerStreamingServer[Quiz]

func _QuizService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizService_ServiceDesc is the grpc.ServiceDesc for QuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _QuizService_GetByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _QuizService_Add_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _QuizService_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cmd/whoami/api/quiz.proto",
}
