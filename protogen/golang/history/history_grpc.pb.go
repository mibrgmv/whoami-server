// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: history.proto

package history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuizCompletionHistoryService_Add_FullMethodName         = "/history.QuizCompletionHistoryService/Add"
	QuizCompletionHistoryService_GetAll_FullMethodName      = "/history.QuizCompletionHistoryService/GetAll"
	QuizCompletionHistoryService_GetByUserID_FullMethodName = "/history.QuizCompletionHistoryService/GetByUserID"
)

// QuizCompletionHistoryServiceClient is the client API for QuizCompletionHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizCompletionHistoryServiceClient interface {
	Add(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[QuizCompletionHistoryItem, QuizCompletionHistoryItem], error)
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuizCompletionHistoryItem], error)
	GetByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuizCompletionHistoryItem], error)
}

type quizCompletionHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizCompletionHistoryServiceClient(cc grpc.ClientConnInterface) QuizCompletionHistoryServiceClient {
	return &quizCompletionHistoryServiceClient{cc}
}

func (c *quizCompletionHistoryServiceClient) Add(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[QuizCompletionHistoryItem, QuizCompletionHistoryItem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuizCompletionHistoryService_ServiceDesc.Streams[0], QuizCompletionHistoryService_Add_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QuizCompletionHistoryItem, QuizCompletionHistoryItem]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizCompletionHistoryService_AddClient = grpc.BidiStreamingClient[QuizCompletionHistoryItem, QuizCompletionHistoryItem]

func (c *quizCompletionHistoryServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuizCompletionHistoryItem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuizCompletionHistoryService_ServiceDesc.Streams[1], QuizCompletionHistoryService_GetAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, QuizCompletionHistoryItem]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizCompletionHistoryService_GetAllClient = grpc.ServerStreamingClient[QuizCompletionHistoryItem]

func (c *quizCompletionHistoryServiceClient) GetByUserID(ctx context.Context, in *GetByUserIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QuizCompletionHistoryItem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuizCompletionHistoryService_ServiceDesc.Streams[2], QuizCompletionHistoryService_GetByUserID_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetByUserIDRequest, QuizCompletionHistoryItem]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizCompletionHistoryService_GetByUserIDClient = grpc.ServerStreamingClient[QuizCompletionHistoryItem]

// QuizCompletionHistoryServiceServer is the server API for QuizCompletionHistoryService service.
// All implementations must embed UnimplementedQuizCompletionHistoryServiceServer
// for forward compatibility.
type QuizCompletionHistoryServiceServer interface {
	Add(grpc.BidiStreamingServer[QuizCompletionHistoryItem, QuizCompletionHistoryItem]) error
	GetAll(*emptypb.Empty, grpc.ServerStreamingServer[QuizCompletionHistoryItem]) error
	GetByUserID(*GetByUserIDRequest, grpc.ServerStreamingServer[QuizCompletionHistoryItem]) error
	mustEmbedUnimplementedQuizCompletionHistoryServiceServer()
}

// UnimplementedQuizCompletionHistoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizCompletionHistoryServiceServer struct{}

func (UnimplementedQuizCompletionHistoryServiceServer) Add(grpc.BidiStreamingServer[QuizCompletionHistoryItem, QuizCompletionHistoryItem]) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedQuizCompletionHistoryServiceServer) GetAll(*emptypb.Empty, grpc.ServerStreamingServer[QuizCompletionHistoryItem]) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedQuizCompletionHistoryServiceServer) GetByUserID(*GetByUserIDRequest, grpc.ServerStreamingServer[QuizCompletionHistoryItem]) error {
	return status.Errorf(codes.Unimplemented, "method GetByUserID not implemented")
}
func (UnimplementedQuizCompletionHistoryServiceServer) mustEmbedUnimplementedQuizCompletionHistoryServiceServer() {
}
func (UnimplementedQuizCompletionHistoryServiceServer) testEmbeddedByValue() {}

// UnsafeQuizCompletionHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizCompletionHistoryServiceServer will
// result in compilation errors.
type UnsafeQuizCompletionHistoryServiceServer interface {
	mustEmbedUnimplementedQuizCompletionHistoryServiceServer()
}

func RegisterQuizCompletionHistoryServiceServer(s grpc.ServiceRegistrar, srv QuizCompletionHistoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuizCompletionHistoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizCompletionHistoryService_ServiceDesc, srv)
}

func _QuizCompletionHistoryService_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuizCompletionHistoryServiceServer).Add(&grpc.GenericServerStream[QuizCompletionHistoryItem, QuizCompletionHistoryItem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizCompletionHistoryService_AddServer = grpc.BidiStreamingServer[QuizCompletionHistoryItem, QuizCompletionHistoryItem]

func _QuizCompletionHistoryService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuizCompletionHistoryServiceServer).GetAll(m, &grpc.GenericServerStream[emptypb.Empty, QuizCompletionHistoryItem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizCompletionHistoryService_GetAllServer = grpc.ServerStreamingServer[QuizCompletionHistoryItem]

func _QuizCompletionHistoryService_GetByUserID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetByUserIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuizCompletionHistoryServiceServer).GetByUserID(m, &grpc.GenericServerStream[GetByUserIDRequest, QuizCompletionHistoryItem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuizCompletionHistoryService_GetByUserIDServer = grpc.ServerStreamingServer[QuizCompletionHistoryItem]

// QuizCompletionHistoryService_ServiceDesc is the grpc.ServiceDesc for QuizCompletionHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizCompletionHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "history.QuizCompletionHistoryService",
	HandlerType: (*QuizCompletionHistoryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _QuizCompletionHistoryService_Add_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _QuizCompletionHistoryService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetByUserID",
			Handler:       _QuizCompletionHistoryService_GetByUserID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "history.proto",
}
