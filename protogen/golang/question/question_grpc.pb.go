// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cmd/whoami/api/question.proto

package question

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionService_Add_FullMethodName             = "/question.QuestionService/Add"
	QuestionService_GetAll_FullMethodName          = "/question.QuestionService/GetAll"
	QuestionService_GetByQuizID_FullMethodName     = "/question.QuestionService/GetByQuizID"
	QuestionService_EvaluateAnswers_FullMethodName = "/question.QuestionService/EvaluateAnswers"
)

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	Add(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Question, Question], error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Question], error)
	GetByQuizID(ctx context.Context, in *GetByQuizIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Question], error)
	EvaluateAnswers(ctx context.Context, in *EvaluateAnswersRequest, opts ...grpc.CallOption) (*EvaluateAnswersResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) Add(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Question, Question], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuestionService_ServiceDesc.Streams[0], QuestionService_Add_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Question, Question]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuestionService_AddClient = grpc.BidiStreamingClient[Question, Question]

func (c *questionServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Question], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuestionService_ServiceDesc.Streams[1], QuestionService_GetAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Question]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuestionService_GetAllClient = grpc.ServerStreamingClient[Question]

func (c *questionServiceClient) GetByQuizID(ctx context.Context, in *GetByQuizIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Question], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuestionService_ServiceDesc.Streams[2], QuestionService_GetByQuizID_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetByQuizIDRequest, Question]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuestionService_GetByQuizIDClient = grpc.ServerStreamingClient[Question]

func (c *questionServiceClient) EvaluateAnswers(ctx context.Context, in *EvaluateAnswersRequest, opts ...grpc.CallOption) (*EvaluateAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateAnswersResponse)
	err := c.cc.Invoke(ctx, QuestionService_EvaluateAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility.
type QuestionServiceServer interface {
	Add(grpc.BidiStreamingServer[Question, Question]) error
	GetAll(*Empty, grpc.ServerStreamingServer[Question]) error
	GetByQuizID(*GetByQuizIDRequest, grpc.ServerStreamingServer[Question]) error
	EvaluateAnswers(context.Context, *EvaluateAnswersRequest) (*EvaluateAnswersResponse, error)
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionServiceServer struct{}

func (UnimplementedQuestionServiceServer) Add(grpc.BidiStreamingServer[Question, Question]) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedQuestionServiceServer) GetAll(*Empty, grpc.ServerStreamingServer[Question]) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedQuestionServiceServer) GetByQuizID(*GetByQuizIDRequest, grpc.ServerStreamingServer[Question]) error {
	return status.Errorf(codes.Unimplemented, "method GetByQuizID not implemented")
}
func (UnimplementedQuestionServiceServer) EvaluateAnswers(context.Context, *EvaluateAnswersRequest) (*EvaluateAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateAnswers not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}
func (UnimplementedQuestionServiceServer) testEmbeddedByValue()                         {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuestionServiceServer).Add(&grpc.GenericServerStream[Question, Question]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuestionService_AddServer = grpc.BidiStreamingServer[Question, Question]

func _QuestionService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuestionServiceServer).GetAll(m, &grpc.GenericServerStream[Empty, Question]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuestionService_GetAllServer = grpc.ServerStreamingServer[Question]

func _QuestionService_GetByQuizID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetByQuizIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuestionServiceServer).GetByQuizID(m, &grpc.GenericServerStream[GetByQuizIDRequest, Question]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuestionService_GetByQuizIDServer = grpc.ServerStreamingServer[Question]

func _QuestionService_EvaluateAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).EvaluateAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_EvaluateAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).EvaluateAnswers(ctx, req.(*EvaluateAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluateAnswers",
			Handler:    _QuestionService_EvaluateAnswers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _QuestionService_Add_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _QuestionService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetByQuizID",
			Handler:       _QuestionService_GetByQuizID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cmd/whoami/api/question.proto",
}
