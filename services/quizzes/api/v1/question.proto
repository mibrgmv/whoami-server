syntax = "proto3";

package question.v1;

option go_package = "github.com/mibrgmv/whoami-server/quizzes/internal/protogen/question/v1;questionv1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service QuestionService {
  rpc BatchCreateQuestions(BatchCreateQuestionsRequest) returns (BatchCreateQuestionsResponse) {
    option (google.api.http) = {
      post: "/api/v1/quizzes/{quiz_id}/questions"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {};
        }
      }
    };
  }

  rpc BatchGetQuestions(BatchGetQuestionsRequest) returns (BatchGetQuestionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/quizzes/{quiz_id}/questions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {};
        }
      }
    };
  }

  rpc EvaluateAnswers(EvaluateAnswersRequest) returns (EvaluateAnswersResponse) {
    option (google.api.http) = {
      post: "/api/v1/quizzes/{quiz_id}/evaluate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {};
        }
      }
    };
  }
}

message OptionWeights {
  repeated float weights = 1;
}

message Question {
  string id = 1;
  string quiz_id = 2;
  string body = 3;
  map<string, OptionWeights> options_weights = 4;
}

message CreateQuestionRequest {
  string quiz_id = 1;
  string body = 2;
  map<string, OptionWeights> options_weights = 3;
}

message BatchCreateQuestionsRequest {
  string quiz_id = 1;
  repeated CreateQuestionRequest requests = 2;
}

message BatchCreateQuestionsResponse {
  repeated Question questions = 1;
}

message BatchGetQuestionsRequest {
  string quiz_id = 1;
}

message BatchGetQuestionsResponse {
  repeated QuestionResponse questions = 1;
}

message QuestionResponse {
  string id = 1;
  string quiz_id = 2;
  string body = 3;
  repeated string options = 4;
}

message Answer {
  string quiz_id = 1;
  string question_id = 2;
  string body = 3;
}

message EvaluateAnswersRequest {
  string quiz_id = 1;
  repeated Answer answers = 2;
}

message EvaluateAnswersResponse {
  string result = 1;
}
