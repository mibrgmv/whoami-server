definitions:
  auth.ErrorResponse:
    properties:
      error:
        example: Invalid credentials
        type: string
    type: object
  auth.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  auth.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  auth.RefreshTokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: SecurePass123!
        minLength: 8
        type: string
      username:
        example: johndoe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.RegisterSuccessResponse:
    properties:
      Email:
        example: john.doe@example.com
        type: string
      ID:
        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        type: string
      Message:
        example: User created successfully
        type: string
      Username:
        example: johndoe
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access and refresh tokens using a valid refresh token
      parameters:
      - description: Refresh token details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed successfully
          schema:
            $ref: '#/definitions/auth.RefreshTokenResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized - Invalid refresh token
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account through Keycloak identity provider
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/auth.RegisterSuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "409":
          description: Conflict - Username or email already exists
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal server error - Failed to create user
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: 'Enter the token in the format: Bearer <your-token-here>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
