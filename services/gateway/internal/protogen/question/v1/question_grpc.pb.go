// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: question.proto

package questionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionService_BatchCreateQuestions_FullMethodName = "/question.v1.QuestionService/BatchCreateQuestions"
	QuestionService_BatchGetQuestions_FullMethodName    = "/question.v1.QuestionService/BatchGetQuestions"
	QuestionService_EvaluateAnswers_FullMethodName      = "/question.v1.QuestionService/EvaluateAnswers"
)

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	BatchCreateQuestions(ctx context.Context, in *BatchCreateQuestionsRequest, opts ...grpc.CallOption) (*BatchCreateQuestionsResponse, error)
	BatchGetQuestions(ctx context.Context, in *BatchGetQuestionsRequest, opts ...grpc.CallOption) (*BatchGetQuestionsResponse, error)
	EvaluateAnswers(ctx context.Context, in *EvaluateAnswersRequest, opts ...grpc.CallOption) (*EvaluateAnswersResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) BatchCreateQuestions(ctx context.Context, in *BatchCreateQuestionsRequest, opts ...grpc.CallOption) (*BatchCreateQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_BatchCreateQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) BatchGetQuestions(ctx context.Context, in *BatchGetQuestionsRequest, opts ...grpc.CallOption) (*BatchGetQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_BatchGetQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) EvaluateAnswers(ctx context.Context, in *EvaluateAnswersRequest, opts ...grpc.CallOption) (*EvaluateAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluateAnswersResponse)
	err := c.cc.Invoke(ctx, QuestionService_EvaluateAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility.
type QuestionServiceServer interface {
	BatchCreateQuestions(context.Context, *BatchCreateQuestionsRequest) (*BatchCreateQuestionsResponse, error)
	BatchGetQuestions(context.Context, *BatchGetQuestionsRequest) (*BatchGetQuestionsResponse, error)
	EvaluateAnswers(context.Context, *EvaluateAnswersRequest) (*EvaluateAnswersResponse, error)
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionServiceServer struct{}

func (UnimplementedQuestionServiceServer) BatchCreateQuestions(context.Context, *BatchCreateQuestionsRequest) (*BatchCreateQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) BatchGetQuestions(context.Context, *BatchGetQuestionsRequest) (*BatchGetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) EvaluateAnswers(context.Context, *EvaluateAnswersRequest) (*EvaluateAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateAnswers not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}
func (UnimplementedQuestionServiceServer) testEmbeddedByValue()                         {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_BatchCreateQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).BatchCreateQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_BatchCreateQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).BatchCreateQuestions(ctx, req.(*BatchCreateQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_BatchGetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).BatchGetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_BatchGetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).BatchGetQuestions(ctx, req.(*BatchGetQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_EvaluateAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).EvaluateAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_EvaluateAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).EvaluateAnswers(ctx, req.(*EvaluateAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question.v1.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchCreateQuestions",
			Handler:    _QuestionService_BatchCreateQuestions_Handler,
		},
		{
			MethodName: "BatchGetQuestions",
			Handler:    _QuestionService_BatchGetQuestions_Handler,
		},
		{
			MethodName: "EvaluateAnswers",
			Handler:    _QuestionService_EvaluateAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question.proto",
}
