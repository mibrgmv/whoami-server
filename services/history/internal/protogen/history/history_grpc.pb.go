// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: history.proto

package history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuizCompletionHistoryService_CreateItem_FullMethodName      = "/history.QuizCompletionHistoryService/CreateItem"
	QuizCompletionHistoryService_BatchGetMyItems_FullMethodName = "/history.QuizCompletionHistoryService/BatchGetMyItems"
	QuizCompletionHistoryService_BatchGetItems_FullMethodName   = "/history.QuizCompletionHistoryService/BatchGetItems"
)

// QuizCompletionHistoryServiceClient is the client API for QuizCompletionHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizCompletionHistoryServiceClient interface {
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*QuizCompletionHistoryItem, error)
	BatchGetMyItems(ctx context.Context, in *BatchGetMyItemsRequest, opts ...grpc.CallOption) (*BatchGetItemsResponse, error)
	BatchGetItems(ctx context.Context, in *BatchGetItemsRequest, opts ...grpc.CallOption) (*BatchGetItemsResponse, error)
}

type quizCompletionHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizCompletionHistoryServiceClient(cc grpc.ClientConnInterface) QuizCompletionHistoryServiceClient {
	return &quizCompletionHistoryServiceClient{cc}
}

func (c *quizCompletionHistoryServiceClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*QuizCompletionHistoryItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuizCompletionHistoryItem)
	err := c.cc.Invoke(ctx, QuizCompletionHistoryService_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizCompletionHistoryServiceClient) BatchGetMyItems(ctx context.Context, in *BatchGetMyItemsRequest, opts ...grpc.CallOption) (*BatchGetItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetItemsResponse)
	err := c.cc.Invoke(ctx, QuizCompletionHistoryService_BatchGetMyItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizCompletionHistoryServiceClient) BatchGetItems(ctx context.Context, in *BatchGetItemsRequest, opts ...grpc.CallOption) (*BatchGetItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetItemsResponse)
	err := c.cc.Invoke(ctx, QuizCompletionHistoryService_BatchGetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizCompletionHistoryServiceServer is the server API for QuizCompletionHistoryService service.
// All implementations must embed UnimplementedQuizCompletionHistoryServiceServer
// for forward compatibility.
type QuizCompletionHistoryServiceServer interface {
	CreateItem(context.Context, *CreateItemRequest) (*QuizCompletionHistoryItem, error)
	BatchGetMyItems(context.Context, *BatchGetMyItemsRequest) (*BatchGetItemsResponse, error)
	BatchGetItems(context.Context, *BatchGetItemsRequest) (*BatchGetItemsResponse, error)
	mustEmbedUnimplementedQuizCompletionHistoryServiceServer()
}

// UnimplementedQuizCompletionHistoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizCompletionHistoryServiceServer struct{}

func (UnimplementedQuizCompletionHistoryServiceServer) CreateItem(context.Context, *CreateItemRequest) (*QuizCompletionHistoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedQuizCompletionHistoryServiceServer) BatchGetMyItems(context.Context, *BatchGetMyItemsRequest) (*BatchGetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetMyItems not implemented")
}
func (UnimplementedQuizCompletionHistoryServiceServer) BatchGetItems(context.Context, *BatchGetItemsRequest) (*BatchGetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetItems not implemented")
}
func (UnimplementedQuizCompletionHistoryServiceServer) mustEmbedUnimplementedQuizCompletionHistoryServiceServer() {
}
func (UnimplementedQuizCompletionHistoryServiceServer) testEmbeddedByValue() {}

// UnsafeQuizCompletionHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizCompletionHistoryServiceServer will
// result in compilation errors.
type UnsafeQuizCompletionHistoryServiceServer interface {
	mustEmbedUnimplementedQuizCompletionHistoryServiceServer()
}

func RegisterQuizCompletionHistoryServiceServer(s grpc.ServiceRegistrar, srv QuizCompletionHistoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuizCompletionHistoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizCompletionHistoryService_ServiceDesc, srv)
}

func _QuizCompletionHistoryService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizCompletionHistoryServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizCompletionHistoryService_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizCompletionHistoryServiceServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizCompletionHistoryService_BatchGetMyItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetMyItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizCompletionHistoryServiceServer).BatchGetMyItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizCompletionHistoryService_BatchGetMyItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizCompletionHistoryServiceServer).BatchGetMyItems(ctx, req.(*BatchGetMyItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizCompletionHistoryService_BatchGetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizCompletionHistoryServiceServer).BatchGetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizCompletionHistoryService_BatchGetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizCompletionHistoryServiceServer).BatchGetItems(ctx, req.(*BatchGetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizCompletionHistoryService_ServiceDesc is the grpc.ServiceDesc for QuizCompletionHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizCompletionHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "history.QuizCompletionHistoryService",
	HandlerType: (*QuizCompletionHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _QuizCompletionHistoryService_CreateItem_Handler,
		},
		{
			MethodName: "BatchGetMyItems",
			Handler:    _QuizCompletionHistoryService_BatchGetMyItems_Handler,
		},
		{
			MethodName: "BatchGetItems",
			Handler:    _QuizCompletionHistoryService_BatchGetItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "history.proto",
}
