definitions:
  models.Answer:
    properties:
      body:
        type: string
      question_id:
        type: integer
      quiz_id:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Question:
    properties:
      body:
        type: string
      id:
        type: integer
      options_weights:
        additionalProperties:
          items:
            type: number
          type: array
        type: object
      quiz_id:
        type: integer
    type: object
  models.Quiz:
    properties:
      id:
        type: integer
      results:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      lastLogin:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  question.question:
    properties:
      body:
        type: string
      id:
        type: integer
      options:
        items:
          type: string
        type: array
      quiz_id:
        type: integer
    type: object
  user.TokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user_id:
        example: 1
        type: integer
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in with token and user ID
          schema:
            $ref: '#/definitions/user.TokenResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: User login
      tags:
      - users
  /question/a:
    post:
      consumes:
      - application/json
      description: Add multiple questions to the database
      parameters:
      - description: Array of question objects to add
        in: body
        name: questions
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Question'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Question'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Add multiple questions
      tags:
      - questions
  /question/q:
    get:
      description: Query questions with parameters such as an array of quiz IDs.
      parameters:
      - collectionFormat: csv
        description: Array of Quiz IDs (comma-separated)
        in: query
        items:
          type: integer
        name: quiz_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/question.question'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Query questions with parameters
      tags:
      - questions
  /quiz/{id}:
    get:
      description: Retrieve a quiz by its ID.
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Quiz'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get quiz by ID
      tags:
      - quizzes
  /quiz/{id}/evaluate:
    post:
      consumes:
      - application/json
      description: Evaluate submitted answers against a quiz and return result weights
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      - description: Array of answer objects to evaluate
        in: body
        name: answers
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Answer'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Evaluate answers for a quiz
      tags:
      - questions
  /quiz/{id}/questions:
    get:
      description: Retrieve questions associated with a specific quiz ID.
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/question.question'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get questions by quiz ID
      tags:
      - questions
  /quiz/a:
    post:
      consumes:
      - application/json
      description: Add multiple quizzes to the database
      parameters:
      - description: Array of quiz objects to add
        in: body
        name: quizzes
        required: true
        schema:
          items:
            $ref: '#/definitions/models.Quiz'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Quiz'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Add multiple quizzes
      tags:
      - quizzes
  /quiz/q:
    get:
      description: Retrieve quizzes based on optional quiz IDs. If no quiz IDs are
        provided, retrieves all quizzes.
      parameters:
      - collectionFormat: csv
        description: List of Quiz IDs (comma-separated)
        in: query
        items:
          type: integer
        name: quiz_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Quiz'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get quizzes
      tags:
      - quizzes
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided username and password
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Register a new user
      tags:
      - users
  /u:
    get:
      description: Retrieve a list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /u/me:
    get:
      description: Retrieve the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
